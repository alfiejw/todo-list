trigger:
- master

# variables:
# - group: todoVars

pool:
  vmImage: 'ubuntu-latest'

stages:
- stage: Test
  jobs:
#  - job: test_remote
#    displayName: Test the Application
#    steps:
#    - task: CopyFilesOverSSH@0
#      inputs:
#        sshEndpoint: 'todo-test'
#        sourceFolder: '.'
#        contents: '**'
#        targetFolder: '/home/pythonadm/todo-list'
#        readyTimeout: '20000'
#    - task: SSH@0
#      inputs:
#        sshEndpoint: 'todo-test'
#        runOptions: 'inline'
#        inline: |
#          sudo apt-get update
#          sudo apt-get install python3 python3-pip python3-venv -y
#          cd /home/pythonadm/todo-list
#          python3 -m venv venv
#          source ./venv/bin/activate
#          pip3 install -r requirements.txt
#          pip3 install --no-binary=flask_testing pytest pytest-cov flask_testing 
#        readyTimeout: '20000'
  - job: test_agent
    displayName: Test Application on Agent
    steps:
    - script: |
        pip3 install --upgrade pip setuptools wheel
        pip3 install pytest pytest-cov flask_testing pymysql
        pip3 install -r requirements.txt
      displayName: 'Install Dependencies'
    - script: |
        export DATABASE_URI=sqlite:///data.db
        python3 -m pytest --doctest-modules --junitxml=junit/test-results.xml --cov=application --cov-report=xml --cov-report=html
      displayName: 'Test with pytest'
    - task: PublishTestResults@2
      condition: succeededOrFailed()
      inputs:
        testResultsFiles: '**/test-*.xml'
        testRunTitle: 'Publish test results for Python $(python.version)'
    - task: PublishCodeCoverageResults@1
      inputs:
        codeCoverageTool: Cobertura
        summaryFileLocation: '$(System.DefaultWorkingDirectory)/**/coverage.xml'
        reportDirectory: '$(System.DefaultWorkingDirectory)/**/htmlcov'
    - script: |
        mkdir artifact
        cp -r app.py create.py application requirements.txt artifact
      displayName: copy to folder for publishing
    - publish: artifact
      artifact: todo-$(Build.BuildNumber)
      displayName: Publish artifact

# - stage: Production
#   jobs:
#   - job: run_app
#     displayName: Run the Application
#     steps:
#     - task: CopyFilesOverSSH@0
#       inputs:
#         sshEndpoint: 'todo-prod'
#         sourceFolder: '.'
#         contents: '**'
#         targetFolder: '/home/pythonadm/todo-list'
#         readyTimeout: '20000'
#     - task: SSH@0
#       env: 
#         DATABASE_URI: $(DATABASE_URI)
#       inputs:
#         sshEndpoint: 'todo-prod'
#         runOptions: 'inline'
#         inline: |
#           #!/bin/bash
          
#           # update
#           sudo apt-get update
#           sudo apt-get install python3 python3-pip python3-venv -y
          
#           # change working directory
#           cd /home/pythonadm/todo-list
          
#           # set env vars
#           #export DATABASE_URI=$(DATABASE_URI)
          
#           # create service script
#           cat << EOF > todo-list.service
#           [Unit]
#           Description=Flask Application
#           [Service]
#           User=pythonadm
#           WorkingDirectory=/home/pythonadm/todo-list
#           Environment=DATABASE_URI=${DATABASE_URI}
#           ExecStart=/bin/bash -c 'source ~/.bashrc && source ./venv/bin/activate && python3 app.py'
#           [Install]
#           WantedBy=multi-user.target
#           EOF
          
#           # install service script
#           sudo cp todo-list.service /etc/systemd/system/
#           sudo systemctl daemon-reload
#           sudo systemctl stop todo-list
          
#           # activate venv and install pip dependencies
#           python3 -m venv venv
#           source venv/bin/activate
#           pip3 install -r requirements.txt
          
#           # start the todo list service
#           sudo systemctl start todo-list
#         readyTimeout: '20000'
        

